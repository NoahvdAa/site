{"componentChunkName":"component---src-templates-wiki-js","path":"/wiki/developers/task-scheduling/","result":{"data":{"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"title\": \"Using the Scheduler\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `The Velocity Scheduler lets you decide when and how your plugin tasks run, allowing fine control over execution. On Velocity, there is no main thread. All tasks run using the Velocity Scheduler are thus run asynchronously.`), mdx(\"h2\", null, `Running a delayed task`), mdx(\"p\", null, `All scheduling works by using a `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `TaskBuilder`), ` returned from the `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `Scheduler`), `. This fluent builder may be chained to configure the details of the scheduling.`), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"java\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-java\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, `server`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `getScheduler`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), `\n  `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `buildTask`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), `plugin`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `->`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `{`), `\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, `// do stuff here`), `\n  `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `}`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), `\n  `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `delay`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, `2L`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token class-name\"\n  }, `TimeUnit`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), `SECONDS`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), `\n  `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `schedule`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`)))), mdx(\"p\", null, `Here, we are scheduling a task to run 2 seconds later. Velocity requires the instance of your plugin, `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `plugin`), ` above. If you are scheduling a task from your main plugin class you may simply use `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `this`), `.`), mdx(\"p\", null, `Time arguments are specified as a `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `long`), ` with a `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `java.util.concurrent.TimeUnit`), `. Using time units makes scheduling delayed tasks more readable and allows for greater precision. `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `2L, TimeUnit.SECONDS`), ` is far easier to understand than the ambiguous `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `2000L`), `.`), mdx(\"h2\", null, `Running a repeating task`), mdx(\"p\", null, `Creating a repeating task is similar to a delayed task, but you must also specify `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `repeat(long, TimeUnit)`), `. This example will repeat every 5 minutes.`), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"java\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-java\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, `server`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `getScheduler`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), `\n  `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `buildTask`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), `plugin`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `->`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `{`), `\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, `// do stuff here`), `\n  `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `}`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), `\n  `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `repeat`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, `5L`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token class-name\"\n  }, `TimeUnit`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), `MINUTES`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), `\n  `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `schedule`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`)))), mdx(\"h2\", null, `Running a task now`), mdx(\"p\", null, `Tasks use the scheduler's cached thread pool for all execution, which reuses threads. To take advantage of this thread pool for running async tasks which run now, simply omit calling the `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `delay`), ` and `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `repeat`), ` methods of the TaskBuilder.`), mdx(\"h2\", null, `Cancellation`), mdx(\"p\", null, `The `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `schedule()`), ` method returns a `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `ScheduledTask`), `, which may then be used to cancel the task involved via the `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `cancel()`), ` method. Tasks cannot be uncancelled.`), mdx(\"p\", null, `Additionally, `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `task.status()`), ` returns the current status of the task.`), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"java\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-java\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-java\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token class-name\"\n  }, `ScheduledTask`), ` task `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `=`), ` server`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `getScheduler`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), `\n  `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `buildTask`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), `plugin`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `->`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `{`), `\n    `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, `// do stuff here`), `\n  `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `}`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), `\n  `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `repeat`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, `5L`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `,`), ` `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token class-name\"\n  }, `TimeUnit`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), `MINUTES`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), `\n  `, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `schedule`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `\n`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, `// ...`), `\ntask`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `cancel`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`), `\n`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, `// ...`), `\n`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token class-name\"\n  }, `System`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), `out`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `println`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), `task`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `.`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, `status`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `(`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `)`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, `;`)))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Using the Scheduler"},"excerpt":"The Velocity Scheduler lets you decide when and how your plugin tasks run, allowing fine control over execution. On Velocity, there is no…"}},"pageContext":{"slug":"/developers/task-scheduling/"}},"staticQueryHashes":["63159454"]}