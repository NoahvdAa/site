{"componentChunkName":"component---src-templates-wiki-js","path":"/wiki/users/server-compatibility/","result":{"data":{"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"title\": \"Server Compatibility\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Velocity is compatible with many Minecraft server implementations. The expectation is that if the server acts like vanilla, Velocity will work, and we make special provisions for modded setups where we can.`), mdx(\"h2\", null, `Compatible game versions`), mdx(\"p\", null, `As of this writing, Velocity is compatible with Minecraft 1.7.2 through 1.17.1.`), mdx(\"h2\", null, `Vanilla setups`), mdx(\"p\", null, `Velocity is best-tested with implementations derived from the vanilla server by Mojang that do not add content to the game itself.`), mdx(\"h3\", null, `Vanilla servers`), mdx(\"p\", null, `The Mojang vanilla software is in a complicated position. It is useful as we often produce protocol updates using the Mojang server for testing, but in production setups, the lack of player info forwarding support can induce subtle client problems.`), mdx(\"p\", null, `If you plan to run a vanilla server, `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `the Velocity team strongly recommends that you use Fabric with the FabricProxy-Lite mod`), `. Fabric and FabricProxy-Lite do not by themselves change the vanilla experience, and your server will remain compatible with vanilla clients. If you are unable (or unwilling) to run Fabric, `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/ME1312/VanillaCord\"\n  }, `VanillaCord`), ` allows you to use legacy BungeeCord forwarding.`), mdx(\"h3\", null, `Spigot`), mdx(\"p\", null, `Spigot is not well-tested with Velocity. However, it is based on vanilla and as it is the base for Paper, it is relatively well-supported.`), mdx(\"p\", null, `Spigot does not support Velocity's modern forwarding, but does support legacy BungeeCord forwarding.`), mdx(\"h3\", null, `Paper`), mdx(\"p\", null, `The Velocity project recommends using Paper for running a public server. Velocity works with all versions of Paper from 1.7.10 to the latest 1.17.1 version.`), mdx(\"p\", null, `You can use Velocity's modern forwarding if you run Paper 1.13.2 or higher. If you use Paper 1.12.2 or lower, you must use legacy BungeeCord-style forwarding.`), mdx(\"h3\", null, `SpongeVanilla`), mdx(\"p\", null, `SpongeVanilla is compatible with legacy BungeeCord-style forwarding. Our Sponge support largely focuses on Forge compatibility, see below for more information.`), mdx(\"h2\", null, `Modded setups`), mdx(\"h3\", null, `Fabric`), mdx(\"p\", null, `Velocity works with Fabric out of the box, but you should add support for player info forwarding using a mod like `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://modrinth.com/mod/fabricproxy-lite\"\n  }, `FabricProxy-Lite`), ` (which supports Velocity modern forwarding).`), mdx(\"p\", null, `In addition, if you intend to run mods that add new content on top of vanilla, you should install `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://modrinth.com/mod/crossstitch\"\n  }, `CrossStitch`), `, which improves support for certain Minecraft features that are extended by mods, such as custom argument types. This mod is officially maintained by the Velocity project.`), mdx(\"h3\", null, `Minecraft Forge (1.13 and above)`), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `Minecraft Forge for Minecraft 1.13 and later is not compatible with Velocity`), ` due to changes made in the handshake protocol that are difficult for proxies to adapt to. Support is currently a work in progress, but there is no set time for support to be available.`), mdx(\"h3\", null, `Minecraft Forge (1.7.2-1.12.2)`), mdx(\"p\", null, `Minecraft Forge for Minecraft 1.7.2-1.12.2 is fully compatible with Velocity, as we make special provisions to synchronize client state with each server. However, we `, mdx(\"strong\", {\n    parentName: \"p\"\n  }, `strongly`), ` recommend the use of SpongeForge, as it allows you to use legacy BungeeCord player info forwarding and generally improves proxy support in general.`), mdx(\"p\", null, `Velocity does not support Forge-Bukkit hybrids - they have caused several issues, and the design of the Bukkit API precludes any notion of sane mod support.`), mdx(\"h2\", null, `Proxy-behind-proxy (BungeeCord/Waterfall, Velocity, ...)`), mdx(\"p\", null, `These setups are `, mdx(\"em\", {\n    parentName: \"p\"\n  }, `completely unsupported`), `. You are best advised to avoid them, as they can cause lots of issues. Most proxy-behind-proxy setups are either illogical in the first place or can be handled more gracefully by better, more scalable and performant solutions.`), mdx(\"h2\", null, `Other Implementations`), mdx(\"p\", null, `This is, naturally, not an exhaustive list. Alternative implementations of the Minecraft protocol may or may not work. We encourage you to experiment and to contribute back with your results.`));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Server Compatibility"},"excerpt":"Velocity is compatible with many Minecraft server implementations. The expectation is that if the server acts like vanilla, Velocity willâ€¦"}},"pageContext":{"slug":"/users/server-compatibility/"}},"staticQueryHashes":["63159454"]}