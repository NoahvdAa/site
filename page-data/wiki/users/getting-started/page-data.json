{"componentChunkName":"component---src-templates-wiki-js","path":"/wiki/users/getting-started/","result":{"data":{"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"title\": \"Getting Started\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst Caution = makeShortcode(\"Caution\");\nconst Link = makeShortcode(\"Link\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `This page covers how to install and set up a minimal configuration of Velocity.`), mdx(\"h2\", null, `Installing Java`), mdx(\"p\", null, `Velocity is written in Java, so if you do not already have Java installed, you\nwill need to install it before you continue. Velocity requires Java 8 or newer.`), mdx(\"p\", null, `We recommend using the HotSpot-based Java 11 builds from `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://adoptopenjdk.net/\"\n  }, `AdoptOpenJDK`), `.`), mdx(Caution, {\n    mdxType: \"Caution\"\n  }, \"Future versions of Velocity will require Java 11. \", mdx(\"a\", {\n    href: \"https://forums.velocitypowered.com/t/future-releases-of-velocity-will-require-java-11-or-higher/561\"\n  }, \"See the announcement for more details\"), \".\"), mdx(\"h2\", null, `Downloading Velocity`), mdx(\"p\", null, `Head over to the `, mdx(Link, {\n    to: \"/downloads\",\n    mdxType: \"Link\"\n  }, `downloads`), ` page to get the latest version of Velocity. We recommend getting the latest stable version. After downloading Velocity, move the JAR file to a dedicated folder for just the proxy or upload it to your server.`), mdx(\"h2\", null, `Launching Velocity for the first time`), mdx(\"p\", null, `Once you have downloaded Velocity, we will launch it for the first time to generate the\nconfiguration file, `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `velocity.toml`), `. You can use the start script created to launch Velocity\nonce you're done configuring Velocity.`), mdx(\"h3\", null, `Launching Velocity under Windows`), mdx(\"p\", null, `Create a `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `start.bat`), ` with the following contents in the same directory where you intend\nto place the proxy files.`), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"batch\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-batch\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-batch\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `@`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token command\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token keyword\"\n  }, `echo`), ` off`), `\n`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token command\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token keyword\"\n  }, `java`), ` -Xms512M -Xmx512M -XX:+UseG1GC -XX:G1HeapRegionSize=4M -XX:+UnlockExperimentalVMOptions -XX:+ParallelRefProcEnabled -XX:+AlwaysPreTouch -jar velocity.jar`), `\n`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token command\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token keyword\"\n  }, `pause`))))), mdx(Caution, {\n    mdxType: \"Caution\"\n  }, \"Make sure to change the \", mdx(\"code\", null, \"velocity.jar\"), \" to the name of the Velocity JAR that you downloaded, or rename the Velocity JAR to \", mdx(\"code\", null, \"velocity.jar\"), \".\"), mdx(\"p\", null, `Once saved, double-click the `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `start.bat`), ` file. If it worked, you should now receive a console similar to the output in the next section.`), mdx(\"h3\", null, `Launching Velocity under macOS or Linux`), mdx(\"p\", null, `Create a `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `start.sh`), ` with the following contents in the same directory where you intend\nto place the proxy files. You may do this using a file transfer client, or using a text\neditor running on the host.`), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"shell\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-shell\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token shebang important\"\n  }, `#!/bin/sh`), `\n\njava -Xms1G -Xmx1G -XX:+UseG1GC -XX:G1HeapRegionSize`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `=`), `4M -XX:+UnlockExperimentalVMOptions -XX:+ParallelRefProcEnabled -XX:+AlwaysPreTouch -XX:MaxInlineLevel`, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, `=`), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, `15`), ` -jar velocity*.jar`))), mdx(\"p\", null, `Once saved, open a terminal (or log into the machine) if you haven't already, navigate to the directory where you have placed the Velocity JAR file and the `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `start.sh`), ` file. Then run `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `chmod +x start.sh`), ` and then `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `./start.sh`), `. If it worked, you should now receive a console similar to the output in the next section.`), mdx(\"h2\", null, `After launch`), mdx(\"p\", null, `Here's a sample of what you'll see once we've started the proxy:`), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"plain\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-plain\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-plain\"\n  }, `[12:04:59 INFO]: Booting up Velocity <unknown>...\n[12:04:59 INFO]: Connections will use epoll channels, libdeflate (Linux x86_64) compression, OpenSSL 1.1.x (Linux x86_64) ciphers\n[12:04:59 INFO]: Loading plugins...\n[12:04:59 INFO]: Loaded 0 plugins\n[12:04:59 INFO]: Listening on /0:0:0:0:0:0:0:0%0:25577\n[12:04:59 INFO]: Done (0.48s)!`))), mdx(\"p\", null, `Velocity has launched, and you are now ready to configure the proxy completely. Go ahead and type `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `end`), ` at the console and press enter. The proxy will shut down:`), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"plain\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-plain\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-plain\"\n  }, `> end\n[12:05:02 INFO]: Shutting down the proxy...\n[12:05:02 INFO]: Closing endpoint /0:0:0:0:0:0:0:0%0:25577`))), mdx(\"p\", null, `If you used the Windows batch script from earlier, the window will ask you to press a key. You can either press a key or close the command window.`), mdx(\"h3\", null, `Configuring your servers`), mdx(\"p\", null, `We now need to configure each server to accept connections from the proxy.`), mdx(\"p\", null, `Velocity is a highly configurable proxy. While most users will not need to change everything in the config, there are tons of options covered `, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/wiki/users/configuration/\"\n  }, `on the configuration wiki page`), ` along with an explanation on how each option works. However, in this section we will do the bare minimum to get the proxy up and running.`), mdx(\"p\", null, `Open the `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `velocity.toml`), ` file in a text editor and search for the `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `[servers]`), ` section. This section specifies the servers that Velocity can connect to. Here's what the `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `[servers]`), ` section will look like initially:`), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"plain\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-plain\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-plain\"\n  }, `[servers]\n# Configure your servers here. Each key represents the server's name, and the value\n# represents the IP address of the server to connect to.\nlobby = \"127.0.0.1:30066\"\nfactions = \"127.0.0.1:30067\"\nminigames = \"127.0.0.1:30068\"\n\n# In what order we should try servers when a player logs in or is kicked from a server.\ntry = [\n  \"lobby\"\n]`))), mdx(\"p\", null, `On the left side, you will specify a name for the server (for example, `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `lobby`), `) and on right is a string indicating the IP address and port for the server. You will now need to add your servers to the list. You can change the list of servers as needed.`), mdx(\"p\", null, `The `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `try`), ` setting is special. It is a list of servers Velocity should try to connect the player to when the player first logs onto the proxy or gets kicked from a server. If you decided to change the name of the `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `lobby`), ` server, then you should replace `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `lobby`), ` in this list with the name you chose for the first server the player should log into first.`), mdx(Caution, {\n    mdxType: \"Caution\"\n  }, \"The following setup is generic and is intended to apply to any Minecraft server. This setup is not only not ergonomic (players will lack skins, proper UUIDs, and all connections will appear to come from the proxy) but also \", mdx(\"strong\", null, \"dangerously insecure\"), \". After you place your servers in offline mode, you \", mdx(\"strong\", null, \"must\"), \" follow the \\\"Player Information Forwarding\\\" and \\\"Securing Your Servers\\\" topics to complete your setup.\"), mdx(\"p\", null, `Open the `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `server.properties`), ` file for each of your servers and set the `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `online-mode`), ` setting to `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `false`), `. This allows Velocity to connect to your server. Once you're done, restart your server. While Velocity is now ready for use, you will almost certainly want to `, mdx(Link, {\n    to: \"/wiki/deployment/security/\",\n    mdxType: \"Link\"\n  }, `secure your servers`), ` and `, mdx(Link, {\n    to: \"/wiki/users/forwarding/\",\n    mdxType: \"Link\"\n  }, `configure player information forwarding`), `.`));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Getting Started"},"excerpt":"This page covers how to install and set up a minimal configuration of Velocity. Installing Java Velocity is written in Java, so if you do…"}},"pageContext":{"slug":"/users/getting-started/"}},"staticQueryHashes":["63159454"]}