{"componentChunkName":"component---src-templates-wiki-js","path":"/wiki/users/built-in-commands/","result":{"data":{"mdx":{"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"title\": \"Built-In Commands\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", props);\n};\n\nconst Caution = makeShortcode(\"Caution\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `Velocity includes a few commands in the core of the proxy by default. These commands were chosen based on how generally useful they are to most users.`), mdx(\"p\", null, `Of course, you can always install plugins to add more commands if you want.`), mdx(\"h2\", null, `The /velocity command`), mdx(\"p\", null, `The `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `/velocity`), ` command contains a number of subcommands to manage the proxy.`), mdx(\"h3\", null, mdx(\"code\", {\n    parentName: \"h3\",\n    \"className\": \"language-text\"\n  }, `/velocity plugins`)), mdx(\"p\", null, `If the user has the `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `velocity.command.plugins`), ` permission, they can view all the plugins currently active on the proxy using `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `/velocity plugins`), `, including the name, authors, and version.`), mdx(\"h3\", null, mdx(\"code\", {\n    parentName: \"h3\",\n    \"className\": \"language-text\"\n  }, `/velocity version`)), mdx(\"p\", null, `Displays the version of Velocity running on the proxy.`), mdx(\"h3\", null, mdx(\"code\", {\n    parentName: \"h3\",\n    \"className\": \"language-text\"\n  }, `/velocity reload`)), mdx(\"p\", null, `If the user has the `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `velocity.command.reload`), ` permission, the proxy will read and reconfigure itself from the `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `velocity.toml`), ` on disk. If there are problems with parsing the file, no changes will be applied.`), mdx(\"h3\", null, mdx(\"code\", {\n    parentName: \"h3\",\n    \"className\": \"language-text\"\n  }, `/velocity dump`)), mdx(\"p\", null, `If the user has the `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `velocity.command.plugins`), ` permission, they can use this command to get an anonymized dump of details on the proxy. This can be sent to the Velocity Discord to help us provide support.`), mdx(Caution, {\n    mdxType: \"Caution\"\n  }, \"This command will send some basic information to a web service maintained by the Velocity project (\", mdx(\"code\", null, \"dump.velocitypowered.com\"), \"). While we anonymize potentially sensitive details in the proxy such as external IP addresses and all dumps expire after 3 days, we do not take responsibility for any potential misuse of the data provided. Use this command with caution and after you have considered the privacy and security concerns.\"), mdx(\"h2\", null, `The /server command`), mdx(\"p\", null, `If the user has the `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `velocity.command.server`), ` permission (by default, this is granted to all users), players can use this command to view and switch to another server.`), mdx(\"p\", null, `Executing just `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `/server`), ` will send the user the name of the server they are currently on, along with options to move to other servers configured on the proxy.`), mdx(\"p\", null, `If a server name has been provided, Velocity will attempt to connect to the server.`), mdx(\"h2\", null, `The /shutdown command`), mdx(\"p\", null, `When executed from the console, this will gracefully shut down the Velocity proxy. All players will be disconnected from the proxy and plugins will have a chance to finish up before the proxy shuts down. An optional reason can be given, either as JSON or with legacy color codes, in the same format as the MOTD in `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `velocity.toml`), `.`), mdx(\"h2\", null, `The /glist command`), mdx(\"p\", null, `If the user has the `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `velocity.command.glist`), ` permission (by default, this is granted to nobody), players can use this command to view the number of players currently on the proxy and use `, mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, `/glist all`), ` to get a listing of players per server.`));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Built-In Commands"},"excerpt":"Velocity includes a few commands in the core of the proxy by default. These commands were chosen based on how generally useful they are toâ€¦"}},"pageContext":{"slug":"/users/built-in-commands/"}},"staticQueryHashes":["63159454"]}